generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account Modal
model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accountType       String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @unique @db.Uuid
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  Admin
  User
}

//user Modal
model User {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullName               String?
  userName               String[]
  email                  String[]  @unique
  mobilePhone            String[]
  emailVerified          DateTime?
  imageUser              String[]
  password               String?
  role                   UserRole  @default(User)
  isTwoFactorEnabled     Boolean   @default(false)
  address                String[]  @db.VarChar(50)
  faculty                String?   @db.VarChar(50)
  emergencyContactNumber String?   @db.VarChar(50)
  emergencyContactName   String?   @db.VarChar(50)
  enrollDate             DateTime?
  expireDate             DateTime?

  // Relations
  accounts              Account[]
  Cart                  Cart[]
  Order                 Order[]
  Topup                 Topup[]
  cards                 cards[]
  visitProfile          visitprofile[]
  TwoFactorConfirmation TwoFactorConfirmation?
  UserPaymentMethod     UserPaymentMethod[]
}

// Verification Token Modal
model VerificationToken {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Reset Password modal
model ResetPasswordToken {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// TwoFactorToken
model TwoFactorToken {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// TwoFactorConfirmation
model TwoFactorConfirmation {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires DateTime
  userId  String   @unique @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//Product Modal
model Product {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  imageUrl      String[]
  salePrice     Float?
  costPrice     Float?
  stockQuantity Int
  brand         String?
  rating        Int
  categoryId    String   @unique @db.Uuid
  reviews       String[]
  isFeatured    Boolean? @default(false)
  taxId         String?  @unique @db.Uuid
  discount      Float?
  status        Boolean  @default(true)

  carts          Cart[]
  inventory      Inventory?
  category       Category         @relation(fields: [categoryId], references: [id])
  Tax            Tax?             @relation(fields: [taxId], references: [id])
  productVariant ProductVariant[]
  order          Order[]          @relation("ProductOrders")
  Supplier       Supplier[]       @relation("ProductToSupplier")
}

// Cart Modal
model Cart {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity       Int
  status         CartStatus       @default(PENDING)
  productId      String           @unique @db.Uuid
  orderId        String?          @unique @db.Uuid
  amount         Float?
  userId         String           @unique @db.Uuid
  order          Order?           @relation("OrderCarts", fields: [orderId], references: [id], onDelete: Cascade)
  product        Product          @relation(fields: [productId], references: [id])
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProductVariant ProductVariant[] @relation("CartToProductVariant")
}

// Variant Modal
model Variant {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  status         Boolean          @default(true)
  ProductVariant ProductVariant[]
  VariantOption  VariantOption[]
}

//Inventory Modal
model Inventory {
  id                String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stockStatus       inventoryStockStatus @default(AVAILABLE)
  quantityAvailable Int
  thresholdValue    Int //Low quantity alert
  stockUpdatedDate  DateTime
  address           String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  productId         String               @unique @db.Uuid
  product           Product              @relation(fields: [productId], references: [id])
}

enum inventoryStockStatus {
  AVAILABLE
  LOWSTOCK
  NOTAVAILABLE
}

model Supplier {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierName String
  email        String?
  phone        String?
  address      String?
  Product      Product[] @relation("ProductToSupplier")
}

//Order Modal
model Order {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderDate     DateTime      @default(now())
  orderQuantity Int
  deliveryDate  DateTime?
  streetAddress String
  state         String
  city          String
  orderStatus   OrderStatus   @default(PENDING)
  discount      Float?
  orderAmount   Float?
  paymentId     String?       @unique @db.Uuid
  paymentStatus Boolean       @default(false)
  userId        String        @unique @db.Uuid
  carts         Cart[]        @relation("OrderCarts")
  PaymentType   PaymentType?  @relation(fields: [paymentId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  SalesInvoice  SalesInvoice?
  product       Product[]     @relation("ProductOrders")
}

//Payement Type Modal
model PaymentType {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paymentType       paymentType         @default(CARD)
  Order             Order[]
  UserPaymentMethod UserPaymentMethod[]
}

enum paymentType {
  CASH
  CARD
}

//productVatiant Modal
model ProductVariant {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  var_id          String         @unique @db.Uuid
  var_opt         String?        @unique @db.Uuid
  productId       String         @unique @db.Uuid
  var_img         String?
  salePrice       Float
  stock           Int?
  status          Boolean        @default(true)
  priceDifference Float?
  costPrice       Float?
  discount        Float?
  Product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  Variant         Variant        @relation(fields: [var_id], references: [id])
  VariantOption   VariantOption? @relation(fields: [var_opt], references: [id])
  Cart            Cart[]         @relation("CartToProductVariant")
}

// SalesInvoice Modal
model SalesInvoice {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceDate DateTime @default(now())
  InvoiceId   String   @unique
  totalAmount Float?
  orderId     String   @unique @db.Uuid
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Tax         Tax[]    @relation("SalesInvoiceToTax")
}

//Tax Modal
model Tax {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  rate         Float
  description  String?
  Product      Product[]
  SalesInvoice SalesInvoice[] @relation("SalesInvoiceToTax")
}

model UserPaymentMethod {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String      @unique @db.Uuid
  typeId         String      @unique @db.Uuid
  provider       String?
  account_number String?
  expiry_date    DateTime?
  is_default     Boolean     @default(true)
  PaymentType    PaymentType @relation(fields: [typeId], references: [id])
  User           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VatiantOption Modal
model VariantOption {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value          String
  var_id         String           @unique @db.Uuid
  variantName    String?
  ProductVariant ProductVariant[]
  Variant        Variant          @relation(fields: [var_id], references: [id])
}

//category Modal
model Category {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryName        String
  categoryDescription String?
  categoryImage       String[]
  products            Product[]
}

//VisitProfile Modal
model visitprofile {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String        @unique @db.Uuid
  visitedBy  String?
  type       ReactionType?
  visitCount Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime
  User       User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

//Top up modal
model Topup {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount      Float
  userId      String      @unique @db.Uuid
  topupType   TopupType   @default(CREDIT)
  topupStatus TopupStatus @default(PENDING)
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
}

enum TopupStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TopupType {
  CREDIT
  CASH
  GGCOIN
}

//card modal membership
model cards {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String   @unique @db.Uuid
  user            User     @relation(fields: [userId], references: [id])
  cardType        cardType @default(BUSINESS)
  backgroundImage String[]
}

enum cardType {
  STUDENT
  BUSINESS
  DEVELOPER
  GAMER
}

enum ReactionType {
  GOODIDEA
  THANKS
  WOW
  HAHA
  LOVE
}

enum socialType {
  FACEBOOK
  INSTAGRAM
  GITHUB
  STEAM
  LINKDN
  GOOGLE
}

enum ProductStatus {
  AVAILABLE
  NOTAVAILABLE
}

enum CartStatus {
  PENDING
  CHECKOUT
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
